#!/usr/bin/ruby
require 'fileutils'

# Need to require rubygems in order for rb-fsevent to work
require 'rubygems'

# Require rb-fsevent gem
# rb-fsevent needed to fix a bug with OS X Lion
begin
  require 'rb-fsevent'
rescue LoadError => e
  print "Error: Could not require rb-fsevent: #{e.message}\n"
end

APP = { :version => "0.2",
        :build   => "2012-08-22" }

RSYNC_TIMEOUT_SEC=10

# Print the script usage
def print_usage
	
print <<OEM
usage: codeSync [-v] <project file>

  -v              Verbose output
  <project file>  File that sets connection and sync settings (see example below)

(version #{APP[:version]} - #{APP[:build]})

This is a mac utility that uses rsync to immediately synchronize file
changes to a server or remote computer, as you work.

NOTE: Since it uses rsync to communicate with the server, it is important
to setup private/public keys: http://bit.ly/PcTRK
(IF YOU DO NOT you will be prompted for your password for each file change.)

CodeSync uses a project file (see example below) for the server connection
settings and which directories to keep in sync.

EXAMPLE PROJECT FILE

   # Server details
   server="remoteserver.com"
   username="johndoe"

   # Base directories to sync from/to
   remote_basedir="/home/johndoe/svn/"
   local_basedir="/work/projects/remote"

   # The directories to sync, relative to the base directories
   sync_dirs=[ "/static/js",
               "/static/css",
               "/gui/jsp" ]     
   # sync_dirs=[  ] # This will sync the entire base directories

   # The contents of these directories will only sync "up" to the server.
   # This means the contents will never be downloaded from the server
   # but files added or changed locally will be sent to the server
   sync_up=[ "/static/img" ]

OEM

end

verbose = false
rsync_flags = ""
projectFilePath = ""

ARGV.each do |arg|
  if arg.strip == "-v"
    verbose = true
    rsync_flags << " -v"
  else
    projectFilePath = arg
    break
  end
end
rsync_flags << " --timeout=#{RSYNC_TIMEOUT_SEC}"

if projectFilePath.strip.empty?
	print_usage
	exit
end

# Read project file
unless File.exists? projectFilePath
	print "#{projectFilePath} does not exist.\n"
	exit
end

contents = ""
File.foreach(projectFilePath) { |s|
  contents << s
}

# Execute project file
server = username = remote_basedir = local_basedir = ""
sync_up = sync_dirs = []
eval(contents)

# Validate project file
if local_basedir.strip.empty?
	print "You need to define local_basedir in the project file\n"
	exit
end

unless username.strip.empty?
	username << "@"
end

# Setup local path
local_basedir = File.expand_path(local_basedir)
if !File.exists?(local_basedir)
  begin
    FileUtils.mkdir_p(local_basedir)
  rescue
  	print "Could not create #{local_basedir}\n"
	  exit
	end
elsif !File.directory?(local_basedir)
    print "#{local_basedir} is not a directory\n"
    exit
end

# Sync base directories if no sync_dirs were specified
if sync_dirs.size == 0 && sync_up.size == 0
  sync_dirs << "."
end

# Expand paths
remoteDirs=[]
localDirs=[]
sync_dirs.each do |dir|
	
	localDirs << File.join(local_basedir, dir)
	remoteDirs << File.join(remote_basedir, ".", dir) # The dot is to remove the base path when rsyncing
	
end

sync_up.each do |dir|
  updir = File.join(local_basedir, dir)
	FileUtils.mkdir_p(updir)
	
	localDirs << updir
end

# Sync to local first
syncFromRemote = false
while true

	print "Would you like synchronize FROM the remote server first? [Yn] "
	input = STDIN.gets.chomp

	if input == "" || input.downcase == "y"
		syncFromRemote = true
		break
	elsif input.downcase == "n"
		syncFromRemote = false
		break
	else
		puts "Invalid response.\n"
	end
	
end

# Synchronize from the server
if syncFromRemote	
	print "\nSynchronizing directories...\n"
	cmd="rsync -aRvhz --timeout=#{RSYNC_TIMEOUT_SEC} --cvs-exclude #{username}#{server}:'#{remoteDirs.join(" ")}' #{local_basedir}"
	ret=system(cmd)
	
	# Error
	if ret == false
		print "\nFAILED: An error occurred trying to synchronize files. See above output for more details\n\n"
		exit
	end
	
	print "DONE\n"
end

# Watch for local changes
print "\nWatching for changes in:\n"
print "\t#{localDirs}\n"
print "...\n"
stream = FSEvent.new

stream.watch localDirs do |fileList|  
  if verbose
    print "File event detected\n"
  end
  
  if verbose
    print "Files: #{fileList}\n"
  end
  
  # Sync
  fileList.each do |path|
    relativePath = path.gsub(local_basedir, "");
    remotePath = File.join(remote_basedir, relativePath)

    print "\nSynchronizing #{relativePath}...\n"

    # Make sure the directory exists
    dir = File.dirname(remotePath)
    cmd = "ssh #{username}#{server} mkdir -p #{dir}"
    ret = system(cmd)
    if ret == false
      print "\nFAILED: Could not create the directory on the server: #{remotePath}\n\n"
      next
    end 

    if File.directory?(path)
      path << "/"
    end

    # Rsync
    cmd = "rsync -ahz #{rsync_flags} #{path} #{username}#{server}:#{remotePath}"
    ret = system(cmd)
    if ret == false
      print "\nFAILED: An error occurred trying to synchronize a file. See above output for more details\n\n"
    else
      print "DONE\n"
    end
  end
end
stream.run
