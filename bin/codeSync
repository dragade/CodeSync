#!/usr/bin/ruby
require 'fsevents'

APP = { :version => "0.1",
        :build   => "2010-05-10" }

# Print the script usage
def print_usage
	
print <<OEM
usage: codeSync [-v] <project file>

  -v              Verbose output
  <project file>  File that sets connection and sync settings (see example below)

(version #{APP[:version]} - #{APP[:build]})

This is a mac utility that uses rsync to immediately synchronize file
changes to a server or remote computer, as you work.

NOTE: Since it uses rsync to communicate with the server, it is important
to setup private/public keys: http://bit.ly/PcTRK
(IF YOU DO NOT you will be prompted for your password for each file change.)

CodeSync uses a project file (see example below) for the server connection
settings and which directories to keep in sync.

EXAMPLE PROJECT FILE

   # Server details
   server="jgillick-md.linkedin.biz"
   username="jgillick"

   # Base directories to sync from/to
   remote_basedir="/Users/jgillick/LinkedIn/svn/network"
   local_basedir="/Users/jeremy/Linkedin/Remote"

   # The directories to sync, relative to the base directories
   sync_dirs=[ "content/leo/static/js",
               "content/leo/static/css",
               "leo/gui-impl/jsp" ]

   # sync_dirs=[  ] # This will sync the entire base directories

   # The contents of these directories will only sync "up" to the server.
   # This means the contents will never be downloaded from the server
   # but files added or changed locally will be sent to the server
   sync_up=[ "content/leo/static/img" ]

OEM

end

verbose = false
rsync_flags = ""
projectFilePath = ""

ARGV.each do |arg|
  if arg.strip == "-v"
    verbose = true
    rsync_flags = "v"
  else
    projectFilePath = arg
    break
  end
end


if projectFilePath.strip.empty?
	print_usage
	exit
end

# Read project file
unless File.exists? projectFilePath
	print "#{projectFilePath} does not exist.\n"
	exit
end

contents = ""
File.foreach(projectFilePath) { |s|
  contents << s
}

# Execute project file
server, username, remote_basedir, local_basedir = ""
sync_up, sync_dirs = []
eval contents

# Validate project file
if local_basedir.strip.empty?
	print "You need to define local_basedir in the project file\n"
	exit
elsif !File.exists? local_basedir
	print "#{local_basedir} does not exist\n"
	exit
end

unless username.strip.empty?
	username << "@"
end
unless server.strip.empty?
	server << ":"
end

# Not sync directories, default to base directories
if sync_dirs.count == 0
  sync_dirs << "."
end

# Expand paths
remoteDirs=[]
localDirs=[]
sync_dirs.each do |dir|
	
	localDirs << File.join(local_basedir, dir)
	remoteDirs << File.join(remote_basedir, ".", dir) # The dot is to remove the base path when rsyncing
	
end
sync_up.each do |dir|
	localDirs << File.join(local_basedir, dir)
end

# Sync to local first
syncFromRemote = false
while true

	print "Would you like syncronize FROM the remote server first? [Yn] "
	input = STDIN.gets.chomp

	if input == "" || input.downcase == "y"
		syncFromRemote = true
		break
	elsif input.downcase == "n"
		syncFromRemote = false
		break
	else
		puts "Invalid response.\n"
	end
	
end

# Syncronize from the server
if syncFromRemote	
	print "\nSyncronizing directories...\n"
	cmd="rsync -aRvhz #{username}#{server}'#{remoteDirs.join(" ")}' #{local_basedir}"
	ret=system(cmd)
	
	# Error
	if ret == false
		print "\nFAILED: An error occurred trying to synchronize files. See above output for more details\n\n"
		exit
	end
	
	print "DONE\n"
end

# Watch for local changes
print "\nWatching for changes in:\n"
print "\t#{localDirs.join("\n\t")}\n"
print "...\n"
stream = FSEvents::Stream.watch(*localDirs) do |events|  

	events.modified_files.each do |file|
		relativePath = file.gsub(local_basedir, "");
		remote = File.join(remote_basedir, relativePath)
		
		print "\nSyncronizing #{relativePath}...\n"
		cmd="rsync -ahz#{rsync_flags} #{file} #{username}#{server}#{remote}"
		ret=system(cmd)
		
		# Error
		if ret == false
			print "\nFAILED: An error occurred trying to synchronize a file. See above output for more details\n\n"
		else
			print "DONE\n"
		end
	end
end
stream.run

